from fastapi import Depends, HTTPException, APIRouter, Form
from ..auth.route import authenticate
from .query import research_paper_summary
from ..config.db import research_paper_collection, summary_collection
import time
from .models import GenerateSummaryRequest

router = APIRouter(prefix="/summary", tags=["summary"])


@router.post("/generate_summary")
async def summary(request: GenerateSummaryRequest, user=Depends(authenticate)):
    doc_id = request.docId
    query = request.query    
    paper = research_paper_collection.find_one({"doc_id": doc_id})
    print("docid: ", doc_id)
    print("query: ", query)
    if not paper:
        raise HTTPException(status_code=404, detail="Research paper not found")
    
    #ensure only a uploader can sumamrize the paper
    if paper["uploader"] != user["username"]:
        raise HTTPException(status_code=406, detail="You cannot access another user's paper")
    
    #call rag pipeline
    res = await research_paper_summary(user["username"], doc_id, query)
    
    # persist the summary in mongo
    summary_collection.insert_one({
        "doc_id": doc_id,
        "requester": user["username"],
        "question": query,
        "response": res.get("summary"),
        "sources": res.get("sources", []),
        "timestamp": time.time()
    })
    
    return {
        "doc_id": doc_id,
        "requester": user["username"]
    }

@router.get("/fetch_summary_by_id/{doc_id}")
async def fetch_summary_by_id(doc_id: str, user=Depends(authenticate)): 
    summaries = summary_collection.find({"doc_id": doc_id, "requester": user["username"]})
    result = []
    for s in summaries:
        s["_id"] = str(s["_id"])
        result.append(s)
    if not result:
        raise HTTPException(status_code=404, detail="No summary found for this user")
    return result

@router.get("/by_user")
async def get_user_summaries(user=Depends(authenticate)):
    # fetch all summaries generated by this user
    summaries = summary_collection.find({"requester": user["username"]})
    if not summaries: 
        raise HTTPException(status_code=404, detail="No summary found for this user")
    
    records_list = []
    for record in summaries:
        record["_id"] = str(record["_id"])
        records_list.append(record)
    
    return records_list
    
    